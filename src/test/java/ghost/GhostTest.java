/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import processing.core.PApplet;
import processing.core.PImage;
import processing.core.PFont;
import java.util.*;
import java.io.*;

public class GhostTest {
    @Test
    public void Test1() {
        App app = new App();
        GameMap gameMap = new GameMap("map.txt");
        gameMap.ScatterCorner();
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        // 204 316 cur4
        int[] modes = new int[]{7,20,7,20,5,20,5,1000};
        Ghost ghost = new Ghost(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.topLeft, 8);
        // 60 12
        //test Ghost.keepScatterTar()
        assertTrue(Arrays.equals(new int[]{0,0}, ghost.keepScatterTar()));
        
        // TEST debug
        ghost.drawLine = false;
        assertFalse(ghost.DEBUG());
        assertTrue(ghost.drawLine);
        ghost.drawLine = true;
        assertTrue(ghost.DEBUG());
        assertFalse(ghost.drawLine);

        //test GridAhead_WAKA(int grids)
        ghost.player = playerTest;
        assertTrue(Arrays.equals(new int[]{172,316}, ghost.GridAhead_WAKA(2)));
        playerTest.cur_direction = 1;
        assertTrue(Arrays.equals(new int[]{204,284}, ghost.GridAhead_WAKA(2)));
        playerTest.cur_direction = 2;
        assertTrue(Arrays.equals(new int[]{204,348}, ghost.GridAhead_WAKA(2)));
        playerTest.cur_direction = 3;
        assertTrue(Arrays.equals(new int[]{236,316}, ghost.GridAhead_WAKA(2)));

        // Test choose 
        //stay
        List<Integer> moves = new ArrayList<Integer>();
        moves.add(1);
        //assertTrue(gameMap.map[14][10].equals("a"));
        ghost.choose_move(60, 12, moves);
        assertEquals(0, ghost.cur_direction);
        ghost.choose_move(60, 15, moves);
        assertEquals(1, ghost.cur_direction);
        // 60 12
        //LEFT
        moves.add(3);
        ghost.cur_direction = 3;
        ghost.choose_move(62, 12, moves);
        assertEquals(3, ghost.cur_direction);

        moves.remove(1); moves.add(2);
        ghost.cur_direction = 3;
        ghost.choose_move(62, 12, moves);
        ghost.cur_direction = 1;
        ghost.choose_move(62, 12, moves);
        assertEquals(1, ghost.cur_direction);
        moves.remove(1); moves.remove(0); moves.add(4);
        moves.add(2);
        ghost.cur_direction = 3;
        ghost.choose_move(62, 12, moves);
        assertEquals(2, ghost.cur_direction);

        ghost.cur_direction = 3;
        moves.remove(1); moves.add(1);
        ghost.choose_move(62, 12, moves);
        assertEquals(1, ghost.cur_direction);

        // Test choose 
        //RIGHT
        moves = new ArrayList<Integer>();
        //assertTrue(gameMap.map[14][10].equals("a"));
        // 60 12 ghost
        // has priority return 4
        moves.add(1); moves.add(4); //1 4
        ghost.cur_direction = 4;
        ghost.choose_move(58, 12, moves);
        assertEquals(4, ghost.cur_direction);
        
        ghost.cur_direction = 4;
        moves.remove(1); moves.add(2); // random
        ghost.choose_move(58, 12, moves);
        
        // last else
        ghost.cur_direction = 4;
        moves.remove(1); moves.add(3); // 1 3
        ghost.choose_move(58, 12, moves);
        assertEquals(1, ghost.cur_direction);
        //last return
        ghost.cur_direction = 4;
        moves.remove(0); moves.remove(0);
        moves.add(2); moves.add(3); // 2 3
        ghost.choose_move(58, 12, moves);
        assertEquals(2, ghost.cur_direction);

        // not equal to cur_direct
        ghost.cur_direction = 1;
        moves.remove(0); moves.remove(0);
        moves.add(1); moves.add(2); // 1 2
        ghost.choose_move(58, 12, moves);
        assertEquals(1, ghost.cur_direction);

        // Test choose 
        //Up
        moves = new ArrayList<Integer>();
        //assertTrue(gameMap.map[14][10].equals("a"));
        // 60 12 ghost
        // has priority return 
        moves.add(4); moves.add(2); //4 2
        ghost.cur_direction = 4;
        ghost.choose_move(60, 14, moves);
        assertEquals(2, ghost.cur_direction);
        
        ghost.cur_direction = 2;
        moves.remove(1); moves.add(3); // random
        ghost.choose_move(60, 14, moves);
        
        // last else
        ghost.cur_direction = 2;
        moves.remove(1); moves.add(1); // 4 1
        ghost.choose_move(60, 14, moves);
        assertEquals(4, ghost.cur_direction);
        //last return
        ghost.cur_direction = 2;
        moves.remove(0); moves.remove(0);
        moves.add(1); moves.add(3); // 1 3
        ghost.choose_move(60, 14, moves);
        assertEquals(3, ghost.cur_direction);

        // not equal to cur_direct
        ghost.cur_direction = 1;
        moves.remove(0); moves.remove(0); // all has but cur-dict not same
        moves.add(4); moves.add(3); moves.add(1); // 1 3
        ghost.choose_move(60, 14, moves);
        assertEquals(4, ghost.cur_direction);

        // Test choose 
        //down
        moves = new ArrayList<Integer>();
        //assertTrue(gameMap.map[14][10].equals("a"));
        // 60 12 ghost
        // has priority return 
        moves.add(4); moves.add(1); //4 2
        ghost.cur_direction = 4;
        ghost.choose_move(60, 10, moves);
        assertEquals(1, ghost.cur_direction);
        
        ghost.cur_direction = 1;
        moves.remove(1); moves.add(3); // random
        ghost.choose_move(60, 10, moves);
        
        // last else
        ghost.cur_direction = 1;
        moves.remove(1); moves.add(2); // 4 2
        ghost.choose_move(60, 10, moves);
        assertEquals(4, ghost.cur_direction);
        //last return
        ghost.cur_direction = 1;
        moves.remove(0); moves.remove(0);
        moves.add(2); moves.add(3); // 1 3
        ghost.choose_move(60, 10, moves);
        assertEquals(3, ghost.cur_direction);

        // not equal to cur_direct
        ghost.cur_direction = 3;
        moves.remove(0); moves.remove(0); // all has but cur-dict not same
        moves.add(4); moves.add(3); moves.add(2); // 1 3
        ghost.choose_move(60, 10, moves);
        assertEquals(3, ghost.cur_direction);
    }

    @Test
    public void TestRelativePosition() {
        App app = new App();
        GameMap gameMap = new GameMap("map.txt");
        gameMap.ScatterCorner();
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        // 204 316 cur4
        int[] modes = new int[]{7,20,7,20,5,20,5,1000};
        Ghost ghost = new Ghost(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.topLeft, 8);
        // 60 12
        // cur_direction = 1(up)
        List<Integer> moves = new ArrayList<Integer>();
        moves.add(2);moves.add(3);
        ghost.choose_move(62, 14, moves);
        int new_move = ghost.position.next_move(0, 2, 1, moves); // xgap < ygap
        assertEquals(2, new_move);

        moves = new ArrayList<Integer>();
        moves.add(3);
        new_move = ghost.position.next_move(2, 0, 1, moves); // xgap > ygap
        assertEquals(3, new_move);

        moves = new ArrayList<Integer>();
        moves.add(2);
        new_move = ghost.position.next_move(2, 0, 1, moves);
        assertEquals(2, new_move);

        moves = new ArrayList<Integer>();
        playerTest.cur_direction = 1;
        moves.add(1); moves.add(4);
        new_move = ghost.position.next_move(2, 0, 1, moves);
        new_move = ghost.position.next_move(0, 2, 1, moves);
        assertEquals(1, new_move);
        moves.clear();
        assertEquals(2, ghost.position.choose_move(1, moves));
        assertEquals(0, ghost.position.invert(6));
    }

    @Test
    public void TestChase() {
        App app = new App();
        PApplet.runSketch(new String[]{""}, app);
        app.setup();
        GameMap gameMap = new GameMap("map.txt");
        gameMap.ScatterCorner();
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        // 204 316 cur4
        int[] modes = new int[]{7,20,7,20,5,20,5,1000};
        Ghost ghost = new Ghost(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.topLeft, 8);
        ghost.player = playerTest;
        ghost.defineFrightImage(app);
        //assertEquals(app.loadImage("frightened.png"), ghost.FrightImage);
        // 60 12
        assertTrue(Arrays.equals(ghost.Chase(), new int[]{playerTest.x, playerTest.y}));

        Ghost ignorant = new Ignorant(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.downLeft, 8);
        ignorant.player = playerTest;
        ignorant.defineImage(app);
        //assertEquals(app.loadImage("ignorant.png"), ghost.ghostImage);
        // 60 12
        assertTrue(Arrays.equals(ignorant.Chase(), new int[]{playerTest.x, playerTest.y}));
        playerTest.x = 70;
        playerTest.y = 15;
        assertTrue(Arrays.equals(ignorant.Chase(), ignorant.scatterTarMap));

        Ghost chaser = new Chaser(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.downLeft, 8);
        chaser.player = playerTest;
        chaser.defineImage(app);
        //assertEquals(app.loadImage("chaser.png"), ghost.ghostImage);
        Ghost whim = new Whim(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.downLeft, 8);
        whim.defineImage(app);
        //assertEquals(app.loadImage("whim.png"), ghost.ghostImage);
        whim.player = playerTest;
        whim.setChaser(chaser); // 38 15
        whim.Chase();
        playerTest.x = 92;
        playerTest.y = 44;
        chaser.x = 76;
        chaser.y = 28; // 44 60
        whim.Chase();

        Ghost ambusher = new Ambusher(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.downLeft, 8);
        ambusher.player = playerTest;
        ambusher.defineImage(app);
        //assertEquals(app.loadImage("ambusher.png"), ghost.ghostImage);
        ambusher.Chase();
        playerTest.x = 60;
        playerTest.y = 12;
        ambusher.Chase();
        playerTest.y = 16;
        ambusher.Chase();
    }

    @Test
    public void GhostModeTest() {
        App app = new App();
        GameMap gameMap = new GameMap("map.txt");
        gameMap.ScatterCorner();
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        // 204 316 cur4
        int[] modes = new int[]{7,20,7,20,5,20,5,1000};
        Ghost ghost = new Ghost(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.topLeft, 4);
        ghost.player = playerTest;
        ghost.frightened = true;
        assertTrue("frightened".equals(ghost.modes.getMode(ghost)));
        app.frameCount = 60;
        playerTest.eatSoda = true;
        ghost.invisible = true;
        ghost.modes.timeCounter2 = 0;
        // test time_manager()
        ghost.modes.time_manager(app, ghost, playerTest);
        assertEquals(1, ghost.modes.timeCounter2);
        app.frameCount = 120;
        ghost.modes.time_manager(app, ghost, playerTest);
        assertEquals(2, ghost.modes.timeCounter2);
        assertEquals(2, ghost.modes.timeCounter3);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        assertEquals(0, ghost.modes.timeCounter2);
        assertFalse(ghost.frightened);
        assertFalse(playerTest.eatSoda);
        ghost.frightened = false;
        //text next()
        assertEquals(1, ghost.modes.next());
        assertTrue("CHASE".equals(ghost.modes.getMode(ghost)));
        ghost.modes.cursor = 8;
        assertEquals(0, ghost.modes.next());
        // test time_manager()
        app.frameCount = 61;
        assertTrue("SCATTER".equals(ghost.modes.time_manager(app, ghost, playerTest)));

        app.frameCount = 60;
        assertTrue("SCATTER".equals(ghost.modes.time_manager(app, ghost, playerTest)));
        assertEquals(1, ghost.modes.timeCounter1);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        ghost.modes.time_manager(app, ghost, playerTest);
        assertEquals(0, ghost.modes.timeCounter1);
    }

    @Test
    public void tickTest() {
        App app = new App();
        GameMap gameMap = new GameMap("map.txt");
        gameMap.ScatterCorner();
        Player playerTest = new Player(60, 28, 1, 3, gameMap.markMap);
        // 60 28
        int[] modes = new int[]{7,20,7,20,5,20,5,1000};
        Ghost ghost = new Ghost(4*16-4, 1*16-4, 1, gameMap.markMap, 4, modes, gameMap.topLeft, 4);
        // 60 12
        ghost.player = playerTest;
        ghost.tick(app);
        assertTrue(playerTest.playerDie);
        playerTest.playerDie = false;
        playerTest.eatSuperFruit = true;
        ghost.tick(app);
        assertTrue(ghost.ghostDie);
        ghost.tick(app);
        ghost.ghostDie = false;
        playerTest.x = 312;
        playerTest.y = 216;
        ghost.player.eatSoda = true;
        ghost.tick(app);
        assertTrue(ghost.invisible);

        //Move Test
        ghost.x = 60;
        ghost.y = 12;
        playerTest.eatSoda = false;
        ghost.cur_direction = 2;
        ghost.move();
        assertEquals(13, ghost.y);
        ghost.cur_direction = 0;
        ghost.move();
        assertEquals(13, ghost.y);

        //next_move Test
        ghost.x = 60;
        ghost.y = 12;
        List<Integer> moves = new ArrayList<Integer>();
        moves.add(1); moves.add(2);
        ghost.next_move("CHASE", moves);
        ghost.next_move("frightened", moves);
    }
}