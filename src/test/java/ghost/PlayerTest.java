/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import processing.core.PApplet;
import processing.core.PImage;
import processing.core.PFont;
import java.util.*;
import java.io.*;

public class PlayerTest {

    @Test 
    public void constructorTest() {
        GameMap gameMap = new GameMap("map.txt");
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        //initial position in config.json
        assertNotNull(playerTest);
    }

    @Test
    public void inputTest() {
        GameMap gameMap = new GameMap("map.txt");
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        assertFalse(playerTest.cur_input(0));
        assertTrue(playerTest.cur_input(37));
        playerTest.tick();
    }
    
    @Test
    public void canMoveTurnTest() {
        GameMap gameMap1 = new GameMap("map1.txt");
        Player playerTest1 = new Player(28, 92, 1, 3, gameMap1.markMap);
        // start position for map1.txt
        //Test valid_move()
        assertFalse(playerTest1.valid_move(4));
        assertFalse(playerTest1.valid_move(2));
        assertTrue(playerTest1.valid_move(3));
        assertTrue(playerTest1.valid_move(1));
        playerTest1.x = 28;
        playerTest1.y = 60;
        assertFalse(playerTest1.valid_move(1)); //can't go up

        playerTest1.cur_direction = 3;
        assertTrue(playerTest1.can_turn(4));

        //Test can_turn(), where x y % 16 != 12
        assertTrue(playerTest1.can_turn(2));
        playerTest1.x = 29;
        playerTest1.y = 92;
        assertFalse(playerTest1.can_turn(1));
        playerTest1.x = 28;
        playerTest1.y = 107;
        assertFalse(playerTest1.can_turn(1));
        playerTest1.x = 29;
        playerTest1.y = 107;
        assertFalse(playerTest1.can_turn(1));

        playerTest1.x = 28;
        playerTest1.y = 76;
        playerTest1.cur_direction = 1; //go up
        assertTrue(playerTest1.valid_move(2)); //Then can go down   
        
        //Test can_turn(), waka can always turn back
        assertTrue(playerTest1.can_turn(2));
        assertFalse(playerTest1.can_turn(3));
        playerTest1.cur_direction = 2;
        assertTrue(playerTest1.can_turn(1));
        assertFalse(playerTest1.can_turn(3));
        assertTrue(playerTest1.can_turn(1));
        playerTest1.cur_direction = 4;
        assertTrue(playerTest1.can_turn(3));
    }

    @Test
    public void tickTest() {
        GameMap gameMap = new GameMap("map.txt");
        Player playerTest = new Player(204, 316, 1, 3, gameMap.markMap);
        playerTest.tick(); // initial tick
        assertEquals(203, playerTest.x);
        // a invalid input
        playerTest.cur_input(38);
        playerTest.tick();
        assertEquals(316, playerTest.y);
        playerTest.playerInput.clear();

        // stay there when collision
        playerTest.x = 140;
        playerTest.y = 316;
        playerTest.cur_direction = 4;
        playerTest.tick();
        assertTrue(playerTest.stay);
        assertEquals(140, playerTest.x);
        assertEquals(316, playerTest.y);

        // can turn back
        playerTest.cur_direction = 3;
        playerTest.tick();
        assertFalse(playerTest.stay);
        playerTest.cur_direction = 4;
        playerTest.tick();
        playerTest.tick();
        //keep moving untill get to next position where can decide if waka will stay
        playerTest.y = 315;
        playerTest.tick();
        assertFalse(playerTest.stay);
        playerTest.x = 141;
        playerTest.tick();
        assertFalse(playerTest.stay);
    }

    @Test
    public void otherMoveTest() {
        GameMap gameMap1 = new GameMap("map1.txt");
        Player playerTest1 = new Player(28, 92, 1, 3, gameMap1.markMap);
        playerTest1.cur_direction = 1;
        playerTest1.move();
        assertEquals(91, playerTest1.y);
        playerTest1.x = 28;
        playerTest1.y = 76;
        playerTest1.cur_direction = 2;
        playerTest1.move();
        assertEquals(77, playerTest1.y);
    }

    @Test
    public void OpenTest() {
        GameMap gameMap1 = new GameMap("map1.txt");
        Player playerTest1 = new Player(28, 92, 1, 3, gameMap1.markMap);
        playerTest1.tick();
        playerTest1.open = -7;
        playerTest1.tick();
        assertEquals(8, playerTest1.open);
        assertFalse(playerTest1.ifOpen);
        playerTest1.open = -6;
        playerTest1.tick();
        assertFalse(playerTest1.ifOpen);
    }

    @Test
    public void ImageTest() {
        App app = new App();
        PApplet.runSketch(new String[]{""}, app);
        app.setup();
        GameMap gameMap1 = new GameMap("map1.txt");
        Player playerTest1 = new Player(28, 92, 1, 3, gameMap1.markMap);
        playerTest1.tick();
        playerTest1.defineImage(app.loadImage("playerClosed90.png"), app.loadImage("playerClosed.png"), app.loadImage("playerUp.png"), app.loadImage("playerDown.png"),app.loadImage("playerLeft.png"), app.loadImage("playerRight.png"));
    }
}
